{"version":3,"file":"static/js/765.38afe0f2.chunk.js","mappings":"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","sources":["Components/TransitionPage.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React, { useEffect } from \"react\";\n\nfunction TransitionPage({ transitionPage, nameTransition }) {\n  useEffect(() => {\n    const canvas = document.getElementById(\"myCanvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    const cellSize = 50;\n    let cellsToFill = [];\n    let cellsToClear = [];\n\n    function clearSquare(col, row) {\n      ctx.clearRect(col * cellSize, row * cellSize, cellSize, cellSize);\n    }\n\n    function resizeCanvas() {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      drawGrid();\n    }\n\n    function fillSquare(col, row, color) {\n      ctx.fillStyle = color;\n      ctx.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\n    }\n\n    function drawGrid() {\n      const numCellsX = canvas.width / cellSize;\n      const numCellsY = canvas.height / cellSize;\n\n      for (let i = 0; i <= numCellsX; i++) {\n        ctx.moveTo(i * cellSize, 0);\n        ctx.lineTo(i * cellSize, canvas.height);\n      }\n\n      for (let j = 0; j <= numCellsY; j++) {\n        ctx.moveTo(0, j * cellSize);\n        ctx.lineTo(canvas.width, j * cellSize);\n      }\n    }\n\n    function shuffle(array) {\n      let currentIndex = array.length,\n        randomIndex;\n\n      // Tant qu'il reste des éléments à mélanger...\n      while (currentIndex !== 0) {\n        // Choisir un élément restant...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        // Et échanger avec l'élément actuel.\n        [array[currentIndex], array[randomIndex]] = [\n          array[randomIndex],\n          array[currentIndex],\n        ];\n      }\n\n      return array;\n    }\n\n    function initCells() {\n      const numCellsX = canvas.width / cellSize;\n      const numCellsY = canvas.height / cellSize;\n\n      for (let x = 0; x < numCellsX; x++) {\n        for (let y = 0; y < numCellsY; y++) {\n          cellsToFill.push({ x, y });\n        }\n      }\n\n      // Mélangeons les cellules pour un effet plus aléatoire\n      cellsToFill = shuffle(cellsToFill);\n    }\n\n    function animateFilling() {\n      if (cellsToFill.length > 0) {\n        for (let i = 0; i <= 10; i++) {\n          if (cellsToFill.length === 0) {\n\n            console.log('ok')\n            window.location.hash = \"\";\n            window.location.hash = nameTransition;\n\n            break;\n          }\n\n          const cell = cellsToFill.pop();\n          fillSquare(cell.x, cell.y, \"white\");\n        }\n      } else if (cellsToClear.length > 0) {\n        for (let i = 0; i <= 10; i++) {\n          if (cellsToClear.length === 0) break;\n\n          const cell = cellsToClear.pop();\n          clearSquare(cell.x, cell.y);\n        }\n      } else {\n        let containeBurger = document.querySelector(\"#containerBurger\");\n        let rowBurger = document.querySelectorAll(\".rowBurger\");\n\n        rowBurger.forEach((element) => {\n          element.classList = \"rowBurger\";\n        });\n        containeBurger.classList.remove(\"expanded\");\n        transitionPage(false);\n        return; // Tous les carrés ont été traités\n      }\n\n      requestAnimationFrame(animateFilling);\n    }\n\n    function startFillingAnimation() {\n      initCells();\n      cellsToClear = [...cellsToFill]; // Copier la liste\n      animateFilling();\n    }\n\n    // Initialiser le canvas et le redimensionner lors de la modification de la taille de la fenêtre\n    resizeCanvas();\n\n    // Démarrer l'animation après un court délai pour voir la grille avant que l'animation ne commence\n    setTimeout(startFillingAnimation, 10);\n  }, []);\n\n  return (\n    <canvas\n      id=\"myCanvas\"\n      style={{ position: \"fixed\", top: 0, zIndex: 5,width:'100%' }}\n    ></canvas>\n  );\n}\n\nexport default TransitionPage;\n","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["_ref","transitionPage","nameTransition","useEffect","canvas","document","getElementById","ctx","getContext","cellSize","cellsToFill","cellsToClear","clearSquare","col","row","clearRect","initCells","numCellsX","width","numCellsY","height","x","y","push","array","randomIndex","currentIndex","length","Math","floor","random","_ref2","shuffle","animateFilling","i","console","log","window","location","hash","cell","pop","color","fillStyle","fillRect","containeBurger","querySelector","querySelectorAll","forEach","element","classList","remove","requestAnimationFrame","innerWidth","innerHeight","moveTo","lineTo","j","drawGrid","setTimeout","_toConsumableArray","_jsx","id","style","position","top","zIndex","_iterableToArray","iter","Symbol","iterator","Array","from","arr","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError"],"sourceRoot":""}